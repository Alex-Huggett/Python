import pygame as pg
from math import floor

loadFrom = input('Please enter the name of the image you would like to load, including the filetype. \
                 \nIf you would like to start from scratch, input nothing.\n')

if '.' in loadFrom:
    image = pg.image.load(loadFrom)
else:
    image = None

previous = (0, 0)
if image == None:
    wx, wy = (720, 480)
else:
    wx, wy = image.get_size()
px = 140
gw = pg.display.set_mode((wx+px, wy))
pg.display.set_caption('Drawing Software')

class Drawer:
    @staticmethod
    def Dot(x, y, size):
        SlidersAsInt = [int(round(slider)) for slider in Sliders]

        global image
        radius = int(floor(size*0.5))

        for yi in range(-radius, radius):
            # set the y position
            ypos = y+yi

            # do not overflow from the left
            if ypos < 0:
                ypos = 0

            # do not overflow from the bottom
            if not ypos >= wy:
                # set the left and right of the box being stamped
                left:int =  ( ypos * wx * 3 ) + ( ( x - radius ) * 3 )
                right:int = ( ypos * wx * 3 ) + ( ( x + radius ) * 3 )

                # if it overflows off of the left, do not let it.
                if ( x - radius ) < 0 :
                    left = right
                
                # same with right
                if ( x + radius ) > wx :
                    right = ( ( ypos + 1 ) * wx * 3 )

                # set the area within the stamp to the colour selected
                image[left : right] = SlidersAsInt[:3] * int( ( right - left ) / 3 )

    @staticmethod
    def Draw():
        global image
        global previous

        x, y = pg.mouse.get_pos()
        x -= px
        if pg.mouse.get_pressed()[0]:
            prevx, prevy = previous
            
            image = pg.image.tostring(image, 'RGB')
            image = list(image)

            # with the distance
            distance = int(round((((x-prevx)**2)+((y-prevy)**2))**0.5))
            if not distance == 0:
                dbd = 1/distance
                for i in range(distance):
                    Drawer.Dot(int(round(prevx*dbd*i+(x*dbd*(distance-i)))), int(round(prevy*dbd*i+(y*dbd*(distance-i)))), Sliders[3])

            image = bytes(image)
            image = pg.image.fromstring(image, (wx, wy), 'RGB')

        previous = (x, y)

    @staticmethod
    def Refresh():
        global hasQuit

        # if the [X] is pressed, close the program
        for event in pg.event.get():
            if event.type == pg.QUIT:
                pg.quit()
                hasQuit = True

        # if the user has exited the program, trying to update will cause an error
        if not hasQuit:
            pg.display.update()
            gw.fill((0,0,0))
    
    @staticmethod
    def Sliders():
        # R, G, B, Size is the order of the sliders

        MouseDown = pg.mouse.get_pressed()[0]
        mousex, mousey = pg.mouse.get_pos()
        global Sliders
        global padding
        for slider in range(len(Sliders)):
            colour = [255*(slider==i) for i in range(3)]
            # the slider value goes up to 255
            sliderValue = Sliders[slider]/255      # v/1
            x = padding+((sliderValue)*(px-padding*2))
            y = (slider+0.5)*(wy/(len(Sliders)+1))
            pg.draw.circle(gw, colour, (x, y), 18)

            # if the slider is being dragged
            if SelectedSliders[slider]:
                # and the mouse is still down
                if MouseDown:
                    # move the slider to the mouse's x
                    x = ((mousex-padding)/(px-padding*2))*255
                    # but not past its limits
                    if x<0:
                        x = 0
                    if x>255:
                        x = 255

                    Sliders[slider] = x
                else:
                    # if the mouse is not down, deselect the slider as it is not being dragged
                    SelectedSliders[slider] = False
            else:
                if MouseDown:
                    # if the mouse is trying to drag the slider then select it
                    if abs(mousex-x)<padding and abs(mousey-y)<padding:
                        SelectedSliders[slider] = True
        
        # set the colours. *_ is for any extras
        r,g,b, *_ = Sliders
        # show the colour that will be drawn
        pg.draw.rect(gw, (r,g,b), pg.Rect(padding, (len(Sliders)+0.5)*(wy/(len(Sliders)+1)), px-(padding*2), padding*2))

# if the user has not chosen an image, make a blank white one
if image == None:
    image = bytes([255 for _ in range(wx*wy*3)])
    image = pg.image.fromstring(image, (wx, wy), 'RGB')

padding = 20
# no sliders should start as selected
SelectedSliders = [False]*4
Sliders = [0]*4

# the user has not quit
hasQuit = False

# once the user quits, the code inside should no longer run
while not hasQuit:
    # draw a line between our previous mouse and current mouse
    Drawer.Draw()

    # draw the image
    gw.blit(image, (px, 0))

    # draw the palette
    pg.draw.rect(gw, (200,200,200), pg.Rect(0,0, px,wy), 0, 5)

    # if the mouse is on the palette, draw the cursor circle in the middle.
    x, y = pg.mouse.get_pos()
    if x<px:
        x,y = (wx * 0.5 + px, wy * 0.5)

    # draw the mouse cursor circle
    pg.draw.circle(gw, Sliders, (x,y), Sliders[3]+2, 4)
    # draw the sliders
    Drawer.Sliders()
    # run everything needed to be run every frame
    Drawer.Refresh()

    # if s (for save) is pressed, end the program.
    if pg.key.get_pressed()[pg.K_s]:
        pg.quit()
        hasQuit = True

# save the file
saveAs = input('What would you like to save it as? Input nothing to not save.\n')

# if they input nothing, do not save it
if not saveAs == '':
    pg.image.save(image, saveAs+'.png')